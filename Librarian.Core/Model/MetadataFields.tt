<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
/* THIS FILE IS AUTOGENERATED DO NOT EDIT
 * The file is generated from MetadataFields.csv.
 */
namespace Librarian.Model.MetadataFields
{
<# 
    var path = Host.ResolvePath(string.Empty);
    var file = Path.Combine(path, "MetadataFields.csv");

    var rows = new List<string[]>();

    using (var reader = new StreamReader(file))
    {
        // skip header
        reader.ReadLine();

        // read file
        while (!reader.EndOfStream)
        {
            string line = reader.ReadLine();
            string[] values = line.Split(',');
            if (values.Length < 3)
                continue;
            
            rows.Add(values);
        }
    }

    foreach (var group in rows.GroupBy(x => x[0]).OrderBy(x => x.Key))
    {
#>
    public static class <#= ToCamelCase(group.Key) #>
    {
<#
        foreach (var attribute in group.OrderBy(attr => attr[1]))
        {
#>
        public static readonly MetadataAttribute <#= ToCamelCase(attribute[1]) #> = new (name: "<#= attribute[1] #>", group: "<#= attribute[0] #>", type: MetadataType.<#= attribute[2] #>);
<#
        }
#>
    }

<#
    }
#>
    public static class Helper
    {
        public static readonly MetadataAttribute[] AllFields = new[]
        {
<#
    foreach (var attribute in rows)
    {
#>
            <#= ToCamelCase(attribute[0]) #>.<#= ToCamelCase(attribute[1]) #>,
<#
    }
#>
        };
    }
}
<#+
    public static string ToCamelCase(string input)
    {
        StringBuilder sb = new StringBuilder();
        bool upperize = true;

        foreach (char chr in input)
        {
            if (chr == ' ')
            {
                upperize = true;
                continue;
            }
            sb.Append(upperize ? Char.ToUpperInvariant(chr) : chr);
            upperize = false;
        }

        return sb.ToString();
    }
#>