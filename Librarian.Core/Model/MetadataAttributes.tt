<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)/T4Resources/CsvHelper.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="CsvHelper" #>
/* THIS FILE IS AUTOGENERATED DO NOT EDIT
 * The file is generated from MetadataAttributes.csv.
 */
namespace Librarian.Model.MetadataAttributes
{
<# 
    var path = Host.ResolvePath(string.Empty);
    var file = Path.Combine(path, "../Data/MetadataAttributes.csv");
    var attributes = GetMetadataAttributes(file);

    foreach (var group in attributes.GroupBy(x => x.Group).OrderBy(x => x.Key))
    {
#>
    public static class <#= ToCamelCase(group.Key) #>
    {
<#
        foreach (var attribute in group.OrderBy(attr => attr.Name))
        {
#>
        public static readonly int <#= ToCamelCase(attribute.Name) #> = <#= attribute.Id #>;
<#
        }
#>
    }

<#
    }
#>
}
<#+
    public static string ToCamelCase(string input)
    {
        StringBuilder sb = new StringBuilder();
        bool upperize = true;

        foreach (char chr in input)
        {
            if (chr == ' ' || chr == '(' || chr == ')')
            {
                upperize = true;
                continue;
            }
            sb.Append(upperize ? Char.ToUpperInvariant(chr) : chr);
            upperize = false;
        }

        return sb.ToString();
    }

    class AttributeDefinition
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Group { get; set; }
        public string Type { get; set; }
        public string Description { get; set; }
        public string Unit { get; set; }
        public bool IsReadOnly { get; set; }
    }

    static IEnumerable<AttributeDefinition> GetMetadataAttributes(string file)
    {
        int index = 1;

        using (var reader = new StreamReader(file))
        using (var csvReader = new CsvReader(reader, CultureInfo.InvariantCulture))
        {
            csvReader.Read();
            csvReader.ReadHeader();

            // read file
            while (csvReader.Read())
            {
                bool isReadOnly = (csvReader["IsReadOnly"] ?? string.Empty).StartsWith("y") || (csvReader["IsReadOnly"] == "true");

                yield return new AttributeDefinition()
                {
                    Id = index++,
                    Group = csvReader["Group"],
                    Name = csvReader["Name"],
                    Description = csvReader["Description"],
                    Type = csvReader["Type"],
                    Unit = csvReader["Unit"],
                    IsReadOnly = isReadOnly
                };
            }
        }
    }
#>